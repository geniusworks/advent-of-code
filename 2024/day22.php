<?php
/**
 * Advent of Code 2024
 * Day 22: Monkey Market
 *
 * @author Martin Diekhoff
 * @link https://adventofcode.com/2024/day/22
 */

const DATA_INPUT_FILE = 'input22.txt';

require_once __DIR__ . '/../' . 'bootstrap.php';

$input = DataImporter::importFromFileWithDefaultFlags(__DIR__ . '/' . DATA_INPUT_FILE);

function solvePart1($input): int
{
    $sum = 0;

    foreach ($input as $index => $buyer) {
        $secretNumber = (int)$buyer;
        for ($i = 0; $i < 2000; $i++) {
            $secretNumber = ($secretNumber * 64) ^ $secretNumber;
            $secretNumber %= 16777216;

            $temp = (int)($secretNumber / 32);
            $secretNumber = $temp ^ $secretNumber;
            $secretNumber %= 16777216;

            $secretNumber = ($secretNumber * 2048) ^ $secretNumber;
            $secretNumber %= 16777216;
        }
        // echo ($index + 1) . ": " . $secretNumber . "\n";
        $sum += $secretNumber;
    }

    return $sum;
}

function solvePart2(array $input): int
{
    // Instead of storing all sequences, we'll test each possible sequence pattern
    // Differences range from -9 to 9, so we'll iterate through all possibilities
    $maxTotal = 0;

    // For each possible sequence of 4 differences
    for ($d1 = -9; $d1 <= 9; $d1++) {
        for ($d2 = -9; $d2 <= 9; $d2++) {
            for ($d3 = -9; $d3 <= 9; $d3++) {
                for ($d4 = -9; $d4 <= 9; $d4++) {
                    $total = processSequence($input, [$d1, $d2, $d3, $d4]);
                    if ($total > $maxTotal) {
                        $maxTotal = $total;
                    }
                }
            }
        }
    }

    return $maxTotal;
}

function processSequence(array $input, array $targetDiffs): int
{
    $total = 0;
    $modulo = 16777216;

    foreach ($input as $initialNumber) {
        $prices = array_fill(0, 5, 0);
        $priceIndex = 0;
        $secretNumber = (int)$initialNumber;
        $found = false;

        $prices[$priceIndex] = $secretNumber % 10;
        $filledPrices = 1;

        for ($i = 0; $i < 2000 && !$found; $i++) {
            $secretNumber = (($secretNumber * 64) ^ $secretNumber) % $modulo;
            $secretNumber = ((int)($secretNumber / 32) ^ $secretNumber) % $modulo;
            $secretNumber = (($secretNumber * 2048) ^ $secretNumber) % $modulo;

            $priceIndex = ($priceIndex + 1) % 5;
            $prices[$priceIndex] = $secretNumber % 10;
            $filledPrices++;

            if ($filledPrices >= 5) {
                // Check if current window matches target sequence
                $matches = true;
                for ($j = 1; $j <= 4; $j++) {
                    $curr = ($priceIndex - 4 + $j + 5) % 5;
                    $prev = ($priceIndex - 4 + $j - 1 + 5) % 5;
                    if (($prices[$curr] - $prices[$prev]) !== $targetDiffs[$j - 1]) {
                        $matches = false;
                        break;
                    }
                }

                if ($matches) {
                    $total += $prices[$priceIndex];
                    $found = true;  // Stop processing this buyer once we find a match
                }
            }
        }
    }

    return $total;
}

// Part 1

$profiler = new Profiler();
$profiler->startProfile();
$result1 = solvePart1($input);
$profiler->stopProfile();
echo "The sum of the 2000th secret number generated by each buyer: {$result1}" . PHP_EOL;
$profiler->reportProfile();

// Part 2

$profiler = new Profiler();
$profiler->startProfile();
$result2 = solvePart2($input);
$profiler->stopProfile();
echo "The most bananas you could get: {$result2}" . PHP_EOL;
$profiler->reportProfile();