<?php
/**
 * Advent of Code 2024
 * Day 22: Monkey Market
 *
 * @author Martin Diekhoff
 * @link https://adventofcode.com/2024/day/22
 */

const DATA_INPUT_FILE = 'input22.txt';

require_once __DIR__ . '/../' . 'bootstrap.php';

$input = DataImporter::importFromFileWithDefaultFlags(__DIR__ . '/' . DATA_INPUT_FILE);

const SECRET_NUMBER_QUOTA = 2000;
const PRUNING_MODULO = 16777216;

function solvePart1($input): int
{
    $sum = 0;

    foreach ($input as $buyer) {
        $secretNumber = (int)$buyer;
        for ($i = 0; $i < SECRET_NUMBER_QUOTA; $i++) {
            $secretNumber = ($secretNumber * 64) ^ $secretNumber;
            $secretNumber %= PRUNING_MODULO;

            $temp = (int)($secretNumber / 32);
            $secretNumber = $temp ^ $secretNumber;
            $secretNumber %= PRUNING_MODULO;

            $secretNumber = ($secretNumber * 2048) ^ $secretNumber;
            $secretNumber %= PRUNING_MODULO;
        }
        // echo ($index + 1) . ": " . $secretNumber . "\n";
        $sum += $secretNumber;
    }

    return $sum;
}

function solvePart2(array $input): int
{
    $maxTotal = 0;
    $sequenceTotals = [];  // Track totals for each sequence across all chunks

    // Process buyers in chunks to reduce memory usage
    $chunkSize = 100;  // Adjust if needed
    for ($buyerStart = 0; $buyerStart < count($input); $buyerStart += $chunkSize) {
        $buyerEnd = min($buyerStart + $chunkSize, count($input));
        $sequences = [];

        // Process one chunk of buyers
        for ($buyerIndex = $buyerStart; $buyerIndex < $buyerEnd; $buyerIndex++) {
            $prices = [];
            $secretNumber = (int)$input[$buyerIndex];

            // Get first price
            $window = [$secretNumber % 10];

            // Use a sliding window approach
            for ($i = 0; $i < SECRET_NUMBER_QUOTA; $i++) {
                $secretNumber = (($secretNumber * 64) ^ $secretNumber) % PRUNING_MODULO;
                $secretNumber = ((int)($secretNumber / 32) ^ $secretNumber) % PRUNING_MODULO;
                $secretNumber = (($secretNumber * 2048) ^ $secretNumber) % PRUNING_MODULO;
                $currentPrice = $secretNumber % 10;

                $window[] = $currentPrice;
                if (count($window) > 5) {
                    array_shift($window);

                    // Calculate differences
                    $diff1 = $window[1] - $window[0];
                    $diff2 = $window[2] - $window[1];
                    $diff3 = $window[3] - $window[2];
                    $diff4 = $window[4] - $window[3];

                    // Store sequence as a string key for clarity (memory is less critical for example data)
                    $key = "$diff1,$diff2,$diff3,$diff4";

                    // Only store if we haven't seen this sequence for this buyer
                    if (!isset($sequences[$key][$buyerIndex])) {
                        $sequences[$key][$buyerIndex] = $window[4];
                    }
                }
            }
        }

        // Update running totals for each sequence
        foreach ($sequences as $key => $buyerPrices) {
            if (!isset($sequenceTotals[$key])) {
                $sequenceTotals[$key] = 0;
            }
            $sequenceTotals[$key] += array_sum($buyerPrices);
        }

        // Clear chunk data
        unset($sequences);
    }

    // Find the maximum total across all sequences
    foreach ($sequenceTotals as $sequence => $total) {
        if ($total > $maxTotal) {
            $maxTotal = $total;
            // echo "Best sequence: $sequence gave total: $total\n";
        }
    }

    return $maxTotal;
}

// Part 1

$profiler = new Profiler();
$profiler->startProfile();
$result1 = solvePart1($input);
$profiler->stopProfile();
echo "The sum of the 2000th secret number generated by each buyer: {$result1}" . PHP_EOL;
$profiler->reportProfile();

// Part 2

$profiler = new Profiler();
$profiler->startProfile();
$result2 = solvePart2($input);
$profiler->stopProfile();
echo "The most bananas you could get: {$result2}" . PHP_EOL;
$profiler->reportProfile();